package com.set.challenge.one;

import java.util.HashSet;
import java.util.Set;

public class HeavenlyBody {
	private final double orbitalDuration;
	private final Set<HeavenlyBody> satellites;
	private final Key mapKey;
	
	public HeavenlyBody(String name, double orbitalDuration, Type bodyType) {
		this.orbitalDuration = orbitalDuration;
		this.mapKey = new Key(name, bodyType);
		this.satellites = new HashSet<>();
	}

	public boolean addSatellite(HeavenlyBody moon) {
		return this.satellites.add(moon);
	}
	
	public Key getMapKey() {
		return mapKey;
	}

	public double getOrbitalDuration() {
		return orbitalDuration;
	}

	public Set<HeavenlyBody> getSatellites() {
		return new HashSet<>(this.satellites);
	}

	public static Key makeKey(String name, Type bodyType) {
		return new Key(name, bodyType);
	}
	
	@Override
	public String toString() {
		return this.getMapKey().getName() + ", " + orbitalDuration + ", " + this.getMapKey().getBodyType();
	}
	
	
	
	//======================================================================//
	
	/**
	 *	We should override both equals() and hashcode() when using object 
	 *	as elements in Set or as key in Map to avoid 
	 *	unexpected behavior and avoid duplicates
	 *
	 *
	 *	Need to make the method final because it have subclasses and to avoid breaking the 
	 *	equals() contract as the subclasses may inadvertently override the equals() breaking the contract
	 */
	@Override
	public final boolean equals(Object obj) {
		//System.out.println("equals() called");
		
		/* This is the default implementation given by Eclipse generator.
		 * 
		 * if (this == obj) return true; if (obj == null) return false; if (getClass()
		 * != obj.getClass()) return false; HeavenlyBody other = (HeavenlyBody) obj; if
		 * (name == null) { if (other.name != null) return false; } else if
		 * (!name.equals(other.name)) return false; return true;
		 */
		
		if(this == obj) { 
			return true;
		} 
	
		if(obj != null || obj instanceof HeavenlyBody) {
			HeavenlyBody theBody = ((HeavenlyBody)obj);
			return this.getMapKey().equals(theBody.getMapKey());
		} 
			return false;
		
	}
	
	/*
	 * If the equals() is final hashcode() also has to be final as per the contract
	 */
	
	@Override
	public final int hashCode() {
		/* Default implementation generated by Eclipse
		 * 
		 * final int prime = 31; 
		 * int result = 1; 
		 * result = prime * result + ((name == null) ? 0 : name.hashCode()); 
		 * return result;
		 */
		//System.out.println("hasCode() called ");
		// 51 is any integer no within the range of integer.
		
											// this part is required because as per our challenge, we are determining 
											// uniqueness based on designation and not name alone
		return this.getMapKey().hashCode();
	}

	
	
	
	//======================================================================//
	
	
	
	
	/**
	 * This class is for use in the Map solarsystem. Currently we have the name of the body as key (of type String)
	 * which is not strictly valid coz it is not unique. name + bodytype is a unique combination and should be 
	 * the key of the the Map. We could manually concatenate them and add as key(still of type String). But the better 
	 * way is to combine them to a inner class as this class does.
	 * 
	 * The class should be final coz we need to make it immutable for it be be used as key.
	 * Also, overriding equals() and hashCode() is required.
	 * @author esliv
	 *
	 */
	public static final class Key {
		private final String name;
		private final Type bodyType;
		
		private Key(String name, Type bodyType) {
			this.name = name;
			this.bodyType = bodyType;
		}
		
		

		public String getName() {
			return name;
		}



		public Type getBodyType() {
			return bodyType;
		}



		@Override
		public String toString() {
			return "Key: " + name + ", " + bodyType;
		}

		@Override
		public int hashCode() {
			return this.name.hashCode() + 51 + this.bodyType.hashCode();
		}

		@Override
		public boolean equals(Object obj) {
			Key argkey = ((Key)obj);
			if(this.getName().equals(argkey.getName())) {
				return this.getBodyType() == argkey.getBodyType();
			}
			
			return false;
		}
		
		
		
		
	}
	
	
}
